{"version":3,"sources":["components/Form.js","components/Todo.js","components/NoTodos.js","components/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Form","imp","size","setInputText","setTodos","todos","inputText","setStatus","setFiltered","selectWork","window","matchMedia","matches","className","onChange","e","target","value","name","type","onClick","preventDefault","isNaN","text","completed","id","Math","round","random","Todo","todo","usefulId","useEffect","AOS","init","style","marginBottom","borderRadius","data-aos","data-aos-mirror","data-aos-offset","map","item","filter","element","NoTodos","padding","textAlign","Todolist","filtered","work","key","console","log","App","useState","status","localStorage","getItem","setItem","JSON","stringify","parse","marginTop","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37feb22f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Form({\r\n  setInputText,\r\n  setTodos,\r\n  todos,\r\n  inputText,\r\n  setStatus,\r\n  setFiltered,\r\n}) {\r\n  const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n  const submitTodoHandler = (e) => {\r\n    e.preventDefault();\r\n    if (inputText !== \"\" && isNaN(inputText)) {\r\n      setTodos([\r\n        ...todos,\r\n        {\r\n          text: inputText,\r\n          completed: false,\r\n          id: `id-${Math.round(Math.random() * 1000)}`,\r\n        },\r\n      ]);\r\n      setInputText(\"\");\r\n    }\r\n  };\r\n  const statusHandler = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n  const deleteAll = () => {\r\n    setFiltered([]);\r\n    setTodos([]);\r\n  };\r\n\r\n  const checkScreen = (imp, size) => {\r\n    return window.matchMedia(`(${imp}-width: ${size}px)`).matches;\r\n  };\r\n\r\n  var selectWork = null;\r\n\r\n  if (checkScreen(\"min\", 650)) {\r\n    selectWork = [\r\n      <div className=\"select\">\r\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>,\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        <input\r\n          onChange={inputTextHandler}\r\n          type=\"text\"\r\n          className=\"todo-input\"\r\n          value={inputText}\r\n        />\r\n        <button\r\n          className=\"todo-button\"\r\n          type=\"submit\"\r\n          onClick={submitTodoHandler}\r\n        >\r\n          <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n        <button className=\"todo-button\" type=\"submit\" onClick={deleteAll}>\r\n          <i className=\"fas fa-minus-circle\"></i>\r\n        </button>\r\n        {selectWork}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport AOS from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\n\r\nexport default function Todo({ todo, todos, setTodos, usefulId }) {\r\n  const deleteHandler = (e) => {\r\n    setTodos(todos.filter((element) => element.id !== todo.id));\r\n  };\r\n  const completeHandler = (e) => {\r\n    setTodos(\r\n      todos.map((item) => {\r\n        if (item.id === todo.id) {\r\n          // console.log(\"I was clicked\");\r\n          return {\r\n            ...item,\r\n            completed: !item.completed,\r\n          };\r\n        }\r\n        // console.log(\"i wasn't clicked\");\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    AOS.init();\r\n    // AOS.refresh();\r\n  }, []);\r\n  // const todoId = document.getElementById(usefulId);\r\n  // if (todoId) {\r\n  //   todoId.setAttribute(\"data-aos\", \"zoom-in-up\");\r\n  //   todoId.setAttribute(\"data-aos-mirror\", \"true\");\r\n  // }\r\n\r\n  return (\r\n    <div\r\n      className={`todo todoId ${todo.completed ? \"completed\" : \"\"}`}\r\n      style={{ marginBottom: 20, borderRadius: 3 }}\r\n      id={usefulId}\r\n      data-aos=\"zoom-in-up\"\r\n      data-aos-mirror=\"true\"\r\n      data-aos-offset=\"10\"\r\n    >\r\n      <li className=\"todo-item\">{todo.text}</li>\r\n      <button\r\n        className={`complete-btn ${todo.completed ? \"completed-right\" : \"\"}`}\r\n        onClick={completeHandler}\r\n      >\r\n        <i className=\"fas fa-check\"></i>\r\n      </button>\r\n      <button className=\"trash-btn\" onClick={deleteHandler}>\r\n        <i className=\"fas fa-trash\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function NoTodos() {\r\n  return (\r\n    <div\r\n      className=\"todo\"\r\n      style={{ borderRadius: 2, padding: 8, textAlign: \"center\" }}\r\n    >\r\n      <li className=\"todo-item\">Sorry, there are no items!</li>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport NoTodos from \"./NoTodos\";\r\n\r\nexport default function Todolist({ todos, setTodos, filtered }) {\r\n  var work = [<NoTodos key={Math.random() * 1000} />];\r\n  if (todos[0]) {\r\n    var work = filtered.map((todo) => (\r\n      <Todo\r\n        todos={todos}\r\n        key={todo.id}\r\n        usefulId={todo.id}\r\n        setTodos={setTodos}\r\n        todo={todo}\r\n      />\r\n    ));\r\n    console.log(work);\r\n  }\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">{work}</ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Form from \"./components/Form\";\r\nimport Todolist from \"./components/Todolist\";\r\n\r\nfunction App() {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [todos, setTodos] = useState([]);\r\n  const [status, setStatus] = useState(\"all\");\r\n  const [filtered, setFiltered] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (function () {\r\n      if (localStorage.getItem(\"todos\") === null) {\r\n        localStorage.setItem(\"todos\", JSON.stringify([]));\r\n      } else {\r\n        setTodos(JSON.parse(localStorage.getItem(\"todos\")));\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    (function () {\r\n      localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n    })();\r\n    (function () {\r\n      switch (status) {\r\n        case \"completed\":\r\n          setFiltered(todos.filter((todo) => todo.completed === true));\r\n          break;\r\n        case \"uncompleted\":\r\n          setFiltered(todos.filter((todo) => todo.completed === false));\r\n          break;\r\n        default:\r\n          setFiltered(todos);\r\n          break;\r\n      }\r\n    })();\r\n  }, [todos, status]);\r\n  const filterHandler = () => {};\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1 style={{ marginTop: \"130px\", marginBottom: \"10px\" }}>TodoX</h1>\r\n      </header>\r\n      <Form\r\n        setInputText={setInputText}\r\n        todos={todos}\r\n        setTodos={setTodos}\r\n        inputText={inputText}\r\n        setStatus={setStatus}\r\n        setFiltered={setFiltered}\r\n      />\r\n      <Todolist\r\n        inputText={inputText}\r\n        setTodos={setTodos}\r\n        todos={todos}\r\n        filtered={filtered}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}